import { AppLoader } from './helpers/app-loader';
import { app, BrowserWindow, ipcMain, screen } from 'electron';
import child_process from 'child_process';
import { getApplicationsSrc, getApplicationsInfo } from './helpers';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
const FIXED_WIDTH = 800;
const START_HEIGHT = 60;
const RESULTS_HEIGHT = 660;
const POSITION_Y = 150;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

let mainWindow: BrowserWindow;
let appsInterval;

const createWindow = (): void => {
  const display = screen.getPrimaryDisplay();
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: START_HEIGHT,
    width: FIXED_WIDTH,
    frame: false,
    transparent: true,
    resizable: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY, // use a preload script
    },
    minHeight: START_HEIGHT,
    x: display.workAreaSize.width / 2 - FIXED_WIDTH / 2 + 50, //TODO 50 is just a random number to center it on my screen, should find a good way later
    y: POSITION_Y,
  });
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();
  AppLoader.loadApps();
  appsInterval = setInterval(AppLoader.loadApps, 60000);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on('before-quit', () => {
  clearInterval(appsInterval);
});
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on('quit-app', () => {
  app.quit();
});
ipcMain.on('reload-apps', () => {
  AppLoader.loadApps();
});
ipcMain.on('show-results', () => {
  mainWindow.setSize(FIXED_WIDTH, RESULTS_HEIGHT, false);
});

ipcMain.on('hide-results', () => {
  mainWindow.setMinimumSize(FIXED_WIDTH, START_HEIGHT);
  mainWindow.setSize(FIXED_WIDTH, START_HEIGHT, false);
});

ipcMain.on('find-apps', (event, appName) => {
  if (appName) {
    event.sender.send('apps-found', AppLoader.getApps(appName));
  }
});

ipcMain.on('open-app', (_, execCommand) => {
  if (execCommand) {
    child_process.exec(execCommand, (error) => {
      if (error) {
        console.error(error);
      } else {
        app.quit();
      }
    });
  }
});
